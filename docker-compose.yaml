services:
  api-gw:
    build: backend/services/api-gw
    ports:
      - "1111:1111"
    environment:
      CONFIG_PATH: /config.yaml
      PASSWORD_RULES: /password_rules.lua
    volumes:
      - ./backend/services/config.yaml:/config.yaml
      - ./backend/services/api-gw/password_rules.lua:/password_rules.lua:ro
      - ./backend/services/api-gw/api-gw.log:/api-gw/api-gw.log
#    depends_on:
#      kafka-1:
#        condition: service_healthy
#      kafka-2:
#        condition: service_healthy
#      kafka-3:
#        condition: service_healthy
#      redis-node-1:
#        condition: service_healthy
#      redis-node-2:
#        condition: service_healthy
#      redis-node-3:
#        condition: service_healthy
#      redis-node-4:
#        condition: service_healthy
#      redis-node-5:
#        condition: service_healthy
#      redis-node-6:
#        condition: service_healthy
    networks:
      - external
      - internal

  user-service:
    build: services/user
    environment:
      CONFIG_PATH: /config.yaml
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      depends_on:
    volumes:
      - ./services/config.yaml:/config.yaml
      - ./services/user/user.log:/user-service/user.log
    depends_on:
      database:
        condition: service_healthy
#      kafka-1:
#        condition: service_healthy
#      kafka-2:
#        condition: service_healthy
#      kafka-3:
#        condition: service_healthy
#      redis-node-1:
#        condition: service_healthy
#      redis-node-2:
#        condition: service_healthy
#      redis-node-3:
#        condition: service_healthy
#      redis-node-4:
#        condition: service_healthy
#      redis-node-5:
#        condition: service_healthy
#      redis-node-6:
#        condition: service_healthy
    networks:
      - internal

  auth-service:
    build: services/auth
    environment:
      CONFIG_PATH: /config.yaml
    volumes:
      - ./services/config.yaml:/config.yaml
      - ./services/auth/auth.log:/auth-service/auth.log
#    depends_on:
  #      kafka-1:
  #        condition: service_healthy
  #      kafka-2:
  #        condition: service_healthy
  #      kafka-3:
  #        condition: service_healthy
#      redis-node-1:
#        condition: service_healthy
#      redis-node-2:
#        condition: service_healthy
#      redis-node-3:
#        condition: service_healthy
#      redis-node-4:
#        condition: service_healthy
#      redis-node-5:
#        condition: service_healthy
#      redis-node-6:
#        condition: service_healthy
    networks:
      - internal

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      database:
        condition: service_healthy
    restart: always
    networks:
      - external

  database:
    image: postgres:16.1-alpine3.19
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PG_MAX_CONNECTIONS: ${PG_MAX_CONNECTIONS}
      PG_WORK_MEM: ${PG_WORK_MEM}
      PG_SHARED_BUFFERS: ${PG_SHARED_BUFFERS}
      PG_WAL_BUFFERS: ${PG_WAL_BUFFERS}
      PG_CHECKPOINT_COMPLETION_TARGET: ${PG_CHECKPOINT_COMPLETION_TARGET}
      PG_MAX_WAL_SIZE: ${PG_MAX_WAL_SIZE}
      PG_MIN_WAL_SIZE: ${PG_MIN_WAL_SIZE}
      PG_LOG_CONNECTIONS: ${PG_LOG_CONNECTIONS}
      PG_LOG_MIN_DURATION_STATEMENT: ${PG_LOG_MIN_DURATION_STATEMENT}
      PG_LOG_STATEMENT: ${PG_LOG_STATEMENT}
      PG_PASSWORD_ENCRYPTION: ${PG_PASSWORD_ENCRYPTION}
      TZ: ${PG_TIMEZONE}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal
      - external

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  zookeeper:
    image: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka-1:
    image: wurstmeister/kafka
    ports:
      - "9095:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://kafka-1:9092,OUTSIDE://kafka-1:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:9092,OUTSIDE://localhost:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_BROKER_ID: 500
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1 ГБ сегмент
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka_data/500:/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka-1:9092 || exit 1" ]
      interval: 10s
      retries: 5
      timeout: 20s

  kafka-2:
    image: wurstmeister/kafka
    ports:
      - "9096:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://kafka-2:9092,OUTSIDE://kafka-2:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:9092,OUTSIDE://localhost:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_BROKER_ID: 501
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1 ГБ сегмент
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka_data/501:/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka-2:9092 || exit 1" ]
      interval: 10s
      retries: 5
      timeout: 20s

  kafka-3:
    image: wurstmeister/kafka
    ports:
      - "9097:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LISTENERS: INTERNAL://kafka-3:9092,OUTSIDE://kafka-3:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:9092,OUTSIDE://localhost:9097
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_BROKER_ID: 502
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_LOG_DIRS: /kafka/logs
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1 ГБ сегмент
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka_data/502:/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka-3:9092 || exit 1" ]
      interval: 10s
      retries: 5
      timeout: 20s

  redis-node-1:
    image: redis:7-alpine
    container_name: redis-node-1
    command: >
      redis-server --cluster-enabled yes --cluster-config-file /data/nodes.conf
      --cluster-node-timeout 5000 --appendonly yes --port 6379
      --bind 0.0.0.0 --protected-mode no
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping" ]
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 5s
    volumes:
      - redis-data-1:/data
    networks:
      - internal

  redis-node-2:
    image: redis:7-alpine
    container_name: redis-node-2
    command: >
      redis-server --cluster-enabled yes --cluster-config-file /data/nodes.conf
      --cluster-node-timeout 5000 --appendonly yes --port 6379
      --bind 0.0.0.0 --protected-mode no
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping" ]
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 5s
    volumes:
      - redis-data-2:/data
    networks:
      - internal

  redis-node-3:
    image: redis:7-alpine
    container_name: redis-node-3
    command: >
      redis-server --cluster-enabled yes --cluster-config-file /data/nodes.conf
      --cluster-node-timeout 5000 --appendonly yes --port 6379
      --bind 0.0.0.0 --protected-mode no
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping" ]
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 5s
    volumes:
      - redis-data-3:/data
    networks:
      - internal

  redis-node-4:
    image: redis:7-alpine
    container_name: redis-node-4
    command: >
      redis-server --cluster-enabled yes --cluster-config-file /data/nodes.conf
      --cluster-node-timeout 5000 --appendonly yes --port 6379
      --bind 0.0.0.0 --protected-mode no
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping" ]
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 5s
    volumes:
      - redis-data-4:/data
    networks:
      - internal

  redis-node-5:
    image: redis:7-alpine
    container_name: redis-node-5
    command: >
      redis-server --cluster-enabled yes --cluster-config-file /data/nodes.conf
      --cluster-node-timeout 5000 --appendonly yes --port 6379
      --bind 0.0.0.0 --protected-mode no
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping" ]
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 5s
    volumes:
      - redis-data-5:/data
    networks:
      - internal

  redis-node-6:
    image: redis:7-alpine
    container_name: redis-node-6
    command: >
      redis-server --cluster-enabled yes --cluster-config-file /data/nodes.conf
      --cluster-node-timeout 5000 --appendonly yes --port 6379
      --bind 0.0.0.0 --protected-mode no
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "6379", "ping" ]
      interval: 10s
      retries: 3
      timeout: 5s
      start_period: 5s
    volumes:
      - redis-data-6:/data
    networks:
      - internal

  redis-cluster-init:
    image: redis:7
    container_name: redis-cluster-init
    command: >
      bash -c "
        until redis-cli -h redis-node-1 -p 6379 ping; do
          echo 'Waiting for redis-node-1 to be ready...';
          sleep 1;
        done;
        until redis-cli -h redis-node-2 -p 6379 ping; do
          echo 'Waiting for redis-node-2 to be ready...';
          sleep 1;
        done;
        until redis-cli -h redis-node-3 -p 6379 ping; do
          echo 'Waiting for redis-node-3 to be ready...';
          sleep 1;
        done;
        until redis-cli -h redis-node-4 -p 6379 ping; do
          echo 'Waiting for redis-node-4 to be ready...';
          sleep 1;
        done;
        until redis-cli -h redis-node-5 -p 6379 ping; do
          echo 'Waiting for redis-node-5 to be ready...';
          sleep 1;
        done;
        until redis-cli -h redis-node-6 -p 6379 ping; do
          echo 'Waiting for redis-node-6 to be ready...';
          sleep 1;
        done;
        echo 'All nodes are ready, starting cluster creation...';
        redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 --cluster-replicas 1 --cluster-yes;
        echo 'Redis Cluster created!';
      "
    depends_on:
      redis-node-1:
        condition: service_healthy
      redis-node-2:
        condition: service_healthy
      redis-node-3:
        condition: service_healthy
      redis-node-4:
        condition: service_healthy
      redis-node-5:
        condition: service_healthy
      redis-node-6:
        condition: service_healthy
    networks:
      - internal

volumes:
  pgdata:
  pgadmin-data:
  redis-data-1:
  redis-data-2:
  redis-data-3:
  redis-data-4:
  redis-data-5:
  redis-data-6:

networks:
  external:
    driver: bridge
  internal:
    driver: bridge
    internal: true